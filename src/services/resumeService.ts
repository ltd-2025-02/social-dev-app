import { GeminiService } from './geminiService';
import { ResumeData, Education, Experience } from '../types/resume';

const CAREER_ASSISTANT_CONTEXT = `
Voc√™ √© um "Assistente de Carreira Virtual", uma IA especialista em RH e design de curr√≠culos. 
Sua comunica√ß√£o deve ser amig√°vel, profissional, encorajadora e extremamente clara.
Seu objetivo √© guiar o usu√°rio passo a passo para criar um curr√≠culo elegante e eficaz.

IMPORTANTE: Sempre responda em portugu√™s brasileiro, seja cordial e encorajador.
`;

export class ResumeService {
  static async improveJobDescription(originalDescription: string, position: string, company: string): Promise<string[]> {
    try {
      const prompt = `
      ${CAREER_ASSISTANT_CONTEXT}
      
      Aja como um especialista em RH. Melhore a seguinte descri√ß√£o de cargo para um curr√≠culo, 
      usando verbos de a√ß√£o e focando em resultados quantific√°veis quando poss√≠vel.
      
      Cargo: ${position}
      Empresa: ${company}
      Descri√ß√£o original: "${originalDescription}"
      
      Forne√ßa 2-3 vers√µes melhoradas, cada uma em uma linha separada, come√ßando com "‚Ä¢".
      Foque em realiza√ß√µes concretas e use linguagem profissional.
      `;

      const response = await GeminiService.sendMessage(prompt);
      
      // Parse the response to extract the improved descriptions
      const lines = response.split('\n').filter(line => line.trim().startsWith('‚Ä¢'));
      
      if (lines.length > 0) {
        return lines.map(line => line.replace('‚Ä¢', '').trim());
      } else {
        // Fallback if the format is different
        return [response.trim()];
      }
    } catch (error) {
      console.error('Erro ao melhorar descri√ß√£o:', error);
      return [`Respons√°vel por ${originalDescription.toLowerCase()}, contribuindo para o crescimento e sucesso da equipe.`];
    }
  }

  static getEducationLevelDisplay(level: string): string {
    const levels = {
      'fundamental': 'Ensino Fundamental',
      'medio': 'Ensino M√©dio',
      'tecnico': 'Curso T√©cnico',
      'superior': 'Ensino Superior',
      'pos-graduacao': 'P√≥s-gradua√ß√£o/Especializa√ß√£o',
      'mba': 'MBA',
      'mestrado': 'Mestrado',
      'doutorado': 'Doutorado',
      'pos-doutorado': 'P√≥s-Doutorado'
    };
    return levels[level as keyof typeof levels] || level;
  }

  static getLanguageLevelDisplay(level: string): string {
    const levels = {
      'basico': 'B√°sico',
      'intermediario': 'Intermedi√°rio',
      'avancado': 'Avan√ßado',
      'fluente': 'Fluente'
    };
    return levels[level as keyof typeof levels] || level;
  }

  static generateResumePreview(resumeData: Partial<ResumeData>): string {
    let preview = '';
    
    if (resumeData.personalInfo) {
      preview += `üìÑ **${resumeData.personalInfo.fullName?.toUpperCase() || 'SEU NOME'}**\n`;
      preview += `üìß ${resumeData.personalInfo.email || '[email]'}\n`;
      preview += `üì± ${resumeData.personalInfo.phone || '[telefone]'}\n`;
      preview += `üìç ${resumeData.personalInfo.address || '[endere√ßo]'}\n`;
      if (resumeData.personalInfo.portfolioUrl) {
        preview += `üåê ${resumeData.personalInfo.portfolioUrl}\n`;
      }
      preview += '\n';
    }

    if (resumeData.education && resumeData.education.length > 0) {
      preview += 'üéì **FORMA√á√ÉO ACAD√äMICA**\n';
      resumeData.education.forEach(edu => {
        preview += `‚Ä¢ ${edu.course} - ${edu.institution} (${edu.startDate} - ${edu.endDate})\n`;
      });
      preview += '\n';
    }

    if (resumeData.experience && resumeData.experience.length > 0) {
      preview += 'üíº **EXPERI√äNCIA PROFISSIONAL**\n';
      resumeData.experience.forEach(exp => {
        preview += `‚Ä¢ **${exp.position}** - ${exp.company}\n`;
        preview += `  ${exp.startDate} - ${exp.endDate}\n`;
        if (exp.description) {
          preview += `  ${exp.description}\n`;
        }
        preview += '\n';
      });
    }

    if (resumeData.projects && resumeData.projects.length > 0) {
      preview += 'üöÄ **PROJETOS**\n';
      resumeData.projects.forEach(project => {
        preview += `‚Ä¢ **${project.name}** - ${project.role}\n`;
        preview += `  ${project.startDate} - ${project.endDate}\n`;
        if (project.description) {
          preview += `  ${project.description}\n`;
        }
        preview += '\n';
      });
    }

    if (resumeData.languages && resumeData.languages.length > 0) {
      preview += 'üåç **IDIOMAS**\n';
      resumeData.languages.forEach(lang => {
        preview += `‚Ä¢ ${lang.name}: ${this.getLanguageLevelDisplay(lang.level)}\n`;
      });
      preview += '\n';
    }

    if (resumeData.certificates && resumeData.certificates.length > 0) {
      preview += 'üèÜ **CERTIFICA√á√ïES**\n';
      resumeData.certificates.forEach(cert => {
        preview += `‚Ä¢ ${cert.name} - ${cert.institution} (${cert.year})\n`;
      });
      preview += '\n';
    }

    if (resumeData.skills && resumeData.skills.length > 0) {
      preview += '‚ö° **HABILIDADES**\n';
      preview += `${resumeData.skills.join(' ‚Ä¢ ')}\n`;
    }

    return preview || 'üìÑ **Seu curr√≠culo aparecer√° aqui conforme voc√™ adiciona informa√ß√µes...**';
  }

  static async generateWelcomeMessage(): Promise<string> {
    return `Ol√°! üëã Sou seu assistente de carreira virtual e vou te ajudar a criar um curr√≠culo profissional e impactante. 

üéØ **Como funciona:**
‚Ä¢ Vou fazer algumas perguntas sobre seus dados, educa√ß√£o e experi√™ncia
‚Ä¢ A qualquer momento, voc√™ pode digitar **"preview"** para ver como o curr√≠culo est√° ficando
‚Ä¢ Ao final, voc√™ poder√° baixar nos formatos PDF, DOC ou DOCX

‚ú® **Vamos come√ßar?** 

Para come√ßar, me conte: **Qual √© o seu nome completo (nome e sobrenome)?**`;
  }

  static validateEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  static validatePhone(phone: string): boolean {
    const phoneRegex = /^\(\d{2}\)\s\d{4,5}-\d{4}$|^\d{10,11}$/;
    return phoneRegex.test(phone.replace(/\s/g, ''));
  }

  static formatPhone(phone: string): string {
    const cleanPhone = phone.replace(/\D/g, '');
    if (cleanPhone.length === 11) {
      return `(${cleanPhone.slice(0, 2)}) ${cleanPhone.slice(2, 7)}-${cleanPhone.slice(7)}`;
    } else if (cleanPhone.length === 10) {
      return `(${cleanPhone.slice(0, 2)}) ${cleanPhone.slice(2, 6)}-${cleanPhone.slice(6)}`;
    }
    return phone;
  }
}